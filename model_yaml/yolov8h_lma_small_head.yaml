# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 Oriented Bounding Boxes (OBB) model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, adalora_sym_mx_channels]
  h: [ 1.00, 2.60, 1024 ]
  n: [ 0.33, 0.25, 1024 ] # YOLOv8n sumadalora_sym_mry: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
  s: [ 0.33, 0.50, 1024 ] # YOLOv8s sumadalora_sym_mry: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  m: [ 0.67, 0.75, 768 ] # YOLOv8m sumadalora_sym_mry: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  l: [ 1.00, 1.00, 512 ] # YOLOv8l sumadalora_sym_mry: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  x: [ 1.00, 1.25, 512 ] # YOLOv8x sumadalora_sym_mry: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs


# YOLOv8.0n backbone
backbone:
  # [from, repeats, module, args]
  - [ [ -1, -1 ], 1, Conv_adalora_sym_m, [ 64, 3, 2, 9, 9, 0. ] ] # 0-P1/2
  - [ -1, 1, Conv_adalora_sym_m, [ 128, 3, 2, 9, 9, 0. ] ] # 1-P2/4
  - [ -1, 3, C2f_adalora_sym_m, [ 128, True, 9, 9, 0. ] ]
  - [ -1, 1, Conv_adalora_sym_m, [ 256, 3, 2, 9, 9, 0. ] ] # 3-P3/8
  - [ -1, 6, C2f_adalora_sym_m, [ 256, True, 9, 9, 0. ] ]
  - [ -1, 1, Conv_adalora_sym_m, [ 512, 3, 2, 9, 9, 0. ] ] # 5-P4/16
  - [ -1, 6, C2f_adalora_sym_m, [ 512, True, 9, 9, 0. ] ]
  - [ -1, 1, Conv_adalora_sym_m, [ 1024, 3, 2, 9, 9, 0. ] ] # 7-P5/32
  - [ -1, 3, C2f_adalora_sym_m, [ 1024, True, 9, 9, 0. ] ]
  - [ -1, 1, SPPF_adalora_sym_m, [ 1024, 5, 9, 9, 0. ] ] # 9

  - [ 0, 1, Add, [ 64 ] ] # 10
  - [ 2, 1, Add, [ 128 ] ] # 11
  - [ 4, 1, Add, [ 256 ] ] #  12 P3
  - [ 6, 1, Add, [ 512 ] ] # 13 P4
  - [ 9, 1, Add, [ 1024 ] ] # 14 P5

# YOLOv8.0n head
head:
  - [ -1, 1, nn.Upsample, [ None, 2, 'nearest' ] ] # uav-p4
  - [ [ -1, 13 ], 1, Concat, [ 1 ] ]  # cat backbone P4
  - [ -1, 3, C2f, [ 512 ] ]  # 17

  - [ -1, 1, nn.Upsample, [ None, 2, 'nearest' ] ] # uav-p3
  - [ [ -1, 12 ], 1, Concat, [ 1 ] ]  # cat backbone P3
  - [ -1, 3, C2f, [ 256 ] ]  # 20 (P3/8-small)

  - [ -1, 1, nn.Upsample, [ None, 2, 'nearest' ] ] # uav-p2
  - [ [ -1,  11 ], 1, Concat, [ 1 ] ]
  - [ -1, 3, C2f, [ 256 ] ]  # 23

  - [ -1, 1, nn.Upsample, [ None, 2, 'nearest' ] ] # uav-p1
  - [ [ -1, 10 ], 1, Concat, [ 1 ] ]
  - [ -1, 3, C2f, [ 128 ] ]  # 26

  - [ -1, 1, Conv, [ 64, 3, 2 ] ]
  - [ [ -1, 23 ], 1, Concat, [ 1 ] ] #uav p2
  - [ -1, 3, C2f, [ 128 ] ]  # 29

  - [ -1, 1, Conv, [ 128, 3, 2 ] ]
  #  - [ [ -1, 20 ], 1, Concat, [ 1 ] ] #uav p3
  - [ -1, 3, C2f, [ 256 ] ]  # 31

  - [ -1, 1, Conv, [ 256, 3, 2 ] ]
  - [ [ -1, 17 ], 1, Concat, [ 1 ] ] #uav p4
  - [ -1, 3, C2f, [ 512 ] ]  # 34

  - [ -1, 1, Conv, [ 512, 3, 2 ] ]
  #  - [ [ -1, 14 ], 1, Concat, [ 1 ] ] #output
  - [ -1, 3, C2f, [ 1024 ] ]  # 36


  - [ [ 26, 29, 31, 34, 36 ], 1, Detect, [ nc ] ]  # Detect(P3, P4, P5)
